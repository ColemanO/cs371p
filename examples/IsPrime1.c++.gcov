        -:    0:Source:IsPrime1.c++
        -:    0:Graph:IsPrime1.gcno
        -:    0:Data:IsPrime1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ------------
        -:    2:// IsPrime1.c++
        -:    3:// ------------
        -:    4:
        -:    5:// https://en.wikipedia.org/wiki/Primality_test
        -:    6:
        -:    7:#include <cassert>  // assert
        -:    8:#include <cmath>    // sqrt
        -:    9:#include <iostream> // cout, endl
        -:   10:
        -:   11:using namespace std;
        -:   12:
function _Z8is_primei called 9 returned 100% blocks executed 87%
        -:   13:bool is_prime (int n) {
       18:   14:    assert(n > 0);
branch  0 taken 0%
branch  1 taken 100%
       17:   15:    if ((n == 1) || ((n % 2) == 0))
branch  0 taken 89%
branch  1 taken 11%
branch  2 taken 25%
branch  3 taken 75%
        3:   16:        return false;
       18:   17:    for (int i = 3; i < std::sqrt(n); ++i)
branch  0 taken 44%
branch  1 taken 56%
        7:   18:        if ((n % i) == 0)
branch  0 taken 25%
branch  1 taken 75%
        1:   19:            return false;
       14:   20:    return true;}
        -:   21:
function main called 1 returned 100% blocks executed 52%
        -:   22:int main () {
        1:   23:    cout << "IsPrime.c++" << endl;
        -:   24:
        2:   25:    assert(!is_prime( 1));
branch  0 taken 0%
branch  1 taken 100%
        2:   26:    assert(!is_prime( 2));
branch  0 taken 0%
branch  1 taken 100%
        2:   27:    assert( is_prime( 3));
branch  0 taken 0%
branch  1 taken 100%
        2:   28:    assert(!is_prime( 4));
branch  0 taken 0%
branch  1 taken 100%
        2:   29:    assert( is_prime( 5));
branch  0 taken 0%
branch  1 taken 100%
        2:   30:    assert( is_prime( 7));
branch  0 taken 0%
branch  1 taken 100%
        2:   31:    assert( is_prime( 9));
branch  0 taken 0%
branch  1 taken 100%
        2:   32:    assert(!is_prime(27));
branch  0 taken 0%
branch  1 taken 100%
        2:   33:    assert( is_prime(29));
branch  0 taken 0%
branch  1 taken 100%
        -:   34:
        1:   35:    cout << "Done." << endl;
        1:   36:    return 0;}
